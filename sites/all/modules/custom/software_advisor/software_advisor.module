<?php

/**
 * @file
 * Code for the TMT Investment Form feature.
 */

use Drupal\software_advisor\SoftwareAdvisorFormController;
use Drupal\software_advisor\SoftwareAdvisorFormStepBase;

define('SOFTWARE_ADVISOR_CATEGORIES_NAME', 'Categories');
define('SOFTWARE_ADVISOR_RATE_MIN', 0);
define('SOFTWARE_ADVISOR_RATE_MAX', 5);
define('SOFTWARE_ADVISOR_SUGGESTIONS_SCORE_MIN', 50);
define('SOFTWARE_ADVISOR_SUGGESTIONS_NUMBER', 5);

/**
 * @todo use a proper autoloader.
 * Autoloads and registers class.
 *
 * After registering this custom autoload function with, the following line
 * would cause the function to attempt to load the \Drupal\module_foo\Bar
 * class from /path/to/module_foo/src/Bar.php: "new \Drupal\module_foo\Bar();".
 *
 * @param string $class The fully-qualified class name.
 *
 * @return void
 */
spl_autoload_register(function ($class) {
  if (strpos($class, 'Drupal\\') === FALSE) {
    // If no, move to the next registered autoloader.
    return;
  }
  $segments = explode('\\', $class);
  if (!$segments || count($segments) < 3) {
    return;
  }
  $prefix = 'Drupal\\' . $segments[1] .'\\';
  // Check if the class uses the namespace prefix.
  $len = strlen($prefix);
  if (strncmp($prefix, $class, $len) !== 0) {
    // If no, move to the next registered autoloader.
    return;
  }
  // Base directory for the namespace prefix.
  $base_dir = drupal_get_path('module', $segments[1]) . '/src/';
  // Get the relative class name.
  $relative_class = substr($class, $len);
  // Replace the namespace prefix with the base directory, replace namespace
  // separators with directory separators in the relative class name, append
  // with '.php'.
  $file = $base_dir . str_replace('\\', '/', $relative_class) . '.php';
  if (file_exists($file)) {
    // If the file exists, require it.
    require $file;
  }
});

/**
 * Implements hook_menu().
 */
function software_advisor_menu() {
  $items['software-advisor/start'] = array(
    'title' => 'Software selection start',
    'page arguments' => array('software_advisor_start_form'),
    'page callback' => 'drupal_get_form',
    'access arguments' => array('software advisor selection'),
    'type' => MENU_CALLBACK,
    'file' => 'software_advisor.pages.inc',
  );
  
  $items['software-advisor'] = array(
    'title' => 'Software selection',
    'page arguments' => array(1),
    'page callback' => 'software_advisor_page',
    'access arguments' => array('software advisor selection'),
    'type' => MENU_CALLBACK,
    'file' => 'software_advisor.pages.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function software_advisor_permission() {
  return array(
    'software advisor selection' =>  array(
      'title' => t('Software advisor selection'),
      'description' => t('Perform software advisor selection.'),
    ),
  );
}

/**
 * Form builder callback: Builds the form of the passed step.
 *
 * @param array $form
 *   The form where to add the elements.
 * @param array $form_state
 *   The form state.
 * @param \Drupal\software_advisor\SoftwareAdvisorFormStepBase $step
 *   The investment step to build.
 *
 * @return array
 *   The form array.
 */
function software_advisor_step_form($form, &$form_state, SoftwareAdvisorFormStepBase $step) {
  return $step->buildForm($form, $form_state);
}

/**
 * Form validation handler: Validates main investment form.
 */
function software_advisor_step_form_validate($form, &$form_state) {
  if (isset($form_state['controller'])) {
    /** @var SoftwareAdvisorFormController $form_controller */
    $form_controller = $form_state['controller'];
    $form_controller->validateForm($form, $form_state);
  }
}

/**
 * Form submit handler: Submits main investment form.
 */
function software_advisor_step_form_submit($form, &$form_state) {
  if (isset($form_state['controller'])) {
    /** @var SoftwareAdvisorFormController $form_controller */
    $form_controller = $form_state['controller'];
    $form_controller->submitForm($form, $form_state);
  }
}
