<?php

/**
 * @file
 * Module file.
 */

/**
 * Implements hook_menu().
 */
function mt_selection_form_menu() {
  $items['selection/%node/success'] = array(
    'title' => 'Software selection results',
    'page arguments' => array(1),
    'page callback' => 'mt_selection_form_result_page',
    'access callback' => 'mt_selection_form_page_access',
    'access arguments' => array(1),
    'type' => MENU_CALLBACK,
    'file' => 'tmt_selection_result_page.pages.inc',
  );

  return $items;
}

/**
 * Checks access for selection process result page.
 */
function mt_selection_form_result_page_access($project_node) {
  global $user;

  $state = MTtSelectionFormController::create($project_node)
    ->getselectionState();
  $selection = $state->selection;

  if ($selection->uid == $user->uid || entity_access('view', 'node', $selection)) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function mt_selection_form_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/' . $plugin_type;
  }
}

/**
 * Implements hook_forms().
 */
function mt_selection_form_forms($form_id, $args) {
  $forms = array();

  // Map all form ids with the right prefix to us. We need to vary form ids to
  // ensure not all forms are processed but only the one with the button
  // pressed.
  if (strpos($form_id, 'mt_selection_form_step') === 0) {
    $forms[$form_id] = array(
      'callback' => 'mt_selection_form_step',
    );
  }
  return $forms;
}

/**
 * Form builder callback: Builds the form of the passed step.
 *
 * @param array $form
 *   The form where to add the elements.
 * @param array $form_state
 *   The form state.
 * @param MTtSelectionFormController $controller
 *   The selection form controller.
 * @param MTtSelectionFormStepBase $step
 *   The selection step to build.
 *
 * @return array
 *   The form array.
 */
function mt_selection_form_step($form, &$form_state, MTtSelectionFormController $controller, MTtSelectionFormStepBase $step) {
  return $step->buildForm($form, $form_state);
}

/**
 * Ajax callback for reloading the whole form.
 */
function mt_selection_form_default_ajax($form, $form_state) {
  if (isset($form_state['controller'])) {
    $form_controller = $form_state['controller'];
    /** @var MTSelectionFormController $form_controller */
    return $form_controller->getActiveStep()->getAjaxCommands($form, $form_state);
  }
}

/**
 * Form validation handler: Validates main selection form.
 */
function mt_selection_form_step_validate($form, &$form_state) {
  if (isset($form_state['controller'])) {
    $form_controller = $form_state['controller'];
    $form_controller->validateForm($form, $form_state);
  }
}

/**
 * Form submit handler: Submits main selection form.
 */
function mt_selection_form_step_submit($form, &$form_state) {
  if (isset($form_state['controller'])) {
    $form_controller = $form_state['controller'];
    $form_controller->submitForm($form, $form_state);
  }
}

/**
 * Form element callback to set custom values into $form_state.
 */
function tmt_invest_form_set_form_values_process($element, &$form_state) {
  foreach ($element['#tmt_custom_values'] as $key => $value) {
    $form_state['values'][$key] = $value;
  }
  return $element;
}
